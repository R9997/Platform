"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Users,
  Mail,
  MessageSquare,
  TrendingUp,
  Target,
  Send,
  UserPlus,
  Filter,
  Zap,
  Brain,
  Share2,
  Phone,
} from "lucide-react"

function MarketingDashboard() {
  const [activeTab, setActiveTab] = useState("overview")
  const [showCampaignModal, setShowCampaignModal] = useState(false)
  const [showSegmentModal, setShowSegmentModal] = useState(false)
  const [showAutofunnelModal, setShowAutofunnelModal] = useState(false)
  const [showFilterModal, setShowFilterModal] = useState(false)
  const [campaignFilter, setCampaignFilter] = useState({ status: "all", type: "all" })
  const [newSegment, setNewSegment] = useState({ name: "", criteria: "", description: "" })
  const [isCreatingSegment, setIsCreatingSegment] = useState(false)
  const [notification, setNotification] = useState<{ type: "success" | "error"; message: string } | null>(null)
  const [segments, setSegments] = useState([
    { id: 1, name: "VIP –∫–ª–∏–µ–Ω—Ç—ã", count: 234, criteria: "–ü–æ–∫—É–ø–∫–∏ > 100k", growth: "+12%" },
    { id: 2, name: "–ù–æ–≤–∏—á–∫–∏", count: 1456, criteria: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è < 30 –¥–Ω–µ–π", growth: "+8%" },
    { id: 3, name: "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", count: 567, criteria: "–ë–µ–∑ –ø–æ–∫—É–ø–æ–∫ > 90 –¥–Ω–µ–π", growth: "-5%" },
  ])

  const [newFunnel, setNewFunnel] = useState({
    name: "",
    trigger: "",
    steps: [{ message: "", channel: "", delay: "0" }],
  })
  const [isCreatingFunnel, setIsCreatingFunnel] = useState(false)
  const [funnels, setFunnels] = useState([
    {
      id: 1,
      name: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–∏—á–∫–æ–≤",
      trigger: "registration",
      status: "–ê–∫—Ç–∏–≤–Ω–∞",
      conversion: 23,
      steps: [
        { message: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ", channel: "email", delay: "0" },
        { message: "–ì–∞–π–¥ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É", channel: "email", delay: "1" },
        { message: "–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", channel: "whatsapp", delay: "3" },
      ],
    },
    {
      id: 2,
      name: "–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö",
      trigger: "inactive",
      status: "–ü–∞—É–∑–∞",
      conversion: 8,
      steps: [
        { message: "–ú—ã —Å–∫—É—á–∞–µ–º –ø–æ –≤–∞–º", channel: "email", delay: "0" },
        { message: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞", channel: "sms", delay: "2" },
        { message: "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å", channel: "whatsapp", delay: "5" },
      ],
    },
  ])

  const funnelData = [
    { stage: "–õ–∏–¥—ã", count: 1250, percentage: 100, color: "bg-blue-500" },
    { stage: "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", count: 875, percentage: 70, color: "bg-green-500" },
    { stage: "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ", count: 525, percentage: 42, color: "bg-yellow-500" },
    { stage: "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏", count: 187, percentage: 15, color: "bg-purple-500" },
  ]

  const campaigns = [
    {
      id: 1,
      name: "–õ–µ—Ç–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞",
      type: "Email",
      status: "–ê–∫—Ç–∏–≤–Ω–∞",
      sent: 5420,
      opened: 2156,
      clicked: 324,
      converted: 47,
    },
    {
      id: 2,
      name: "–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
      type: "WhatsApp",
      status: "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
      sent: 1200,
      opened: 980,
      clicked: 156,
      converted: 23,
    },
    { id: 3, name: "–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è", type: "SMS", status: "–ß–µ—Ä–Ω–æ–≤–∏–∫", sent: 0, opened: 0, clicked: 0, converted: 0 },
  ]

  const filteredCampaigns = campaigns.filter((campaign) => {
    const statusMatch = campaignFilter.status === "all" || campaign.status === campaignFilter.status
    const typeMatch = campaignFilter.type === "all" || campaign.type === campaignFilter.type
    return statusMatch && typeMatch
  })

  const handleCreateSegment = async () => {
    if (!newSegment.name.trim()) {
      setNotification({ type: "error", message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞" })
      return
    }

    if (!newSegment.criteria.trim()) {
      setNotification({ type: "error", message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏" })
      return
    }

    if (segments.some((segment) => segment.name.toLowerCase() === newSegment.name.toLowerCase())) {
      setNotification({ type: "error", message: "–°–µ–≥–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" })
      return
    }

    setIsCreatingSegment(true)

    try {
      await new Promise((resolve) => setTimeout(resolve, 1000))

      const newSegmentData = {
        id: segments.length + 1,
        name: newSegment.name.trim(),
        count: Math.floor(Math.random() * 1000) + 100,
        criteria: newSegment.criteria,
        growth: `+${Math.floor(Math.random() * 20)}%`,
      }

      setSegments((prevSegments) => [...prevSegments, newSegmentData])
      setNewSegment({ name: "", criteria: "", description: "" })
      setShowSegmentModal(false)
      setNotification({ type: "success", message: `–°–µ–≥–º–µ–Ω—Ç "${newSegmentData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!` })

      setTimeout(() => setNotification(null), 3000)
    } catch (error) {
      setNotification({ type: "error", message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." })
    } finally {
      setIsCreatingSegment(false)
    }
  }

  const handleAddFunnelStep = () => {
    setNewFunnel({
      ...newFunnel,
      steps: [...newFunnel.steps, { message: "", channel: "", delay: "0" }],
    })
  }

  const handleRemoveFunnelStep = (index: number) => {
    if (newFunnel.steps.length > 1) {
      setNewFunnel({
        ...newFunnel,
        steps: newFunnel.steps.filter((_, i) => i !== index),
      })
    }
  }

  const handleFunnelStepChange = (index: number, field: string, value: string) => {
    const updatedSteps = newFunnel.steps.map((step, i) => (i === index ? { ...step, [field]: value } : step))
    setNewFunnel({ ...newFunnel, steps: updatedSteps })
  }

  const handleCreateFunnel = async () => {
    if (!newFunnel.name.trim()) {
      setNotification({ type: "error", message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏" })
      return
    }

    if (!newFunnel.trigger) {
      setNotification({ type: "error", message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–ø—É—Å–∫–∞" })
      return
    }

    const hasEmptySteps = newFunnel.steps.some((step) => !step.message.trim() || !step.channel)
    if (hasEmptySteps) {
      setNotification({ type: "error", message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏" })
      return
    }

    if (funnels.some((funnel) => funnel.name.toLowerCase() === newFunnel.name.toLowerCase())) {
      setNotification({ type: "error", message: "–í–æ—Ä–æ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" })
      return
    }

    setIsCreatingFunnel(true)

    try {
      await new Promise((resolve) => setTimeout(resolve, 1000))

      const newFunnelData = {
        id: funnels.length + 1,
        name: newFunnel.name.trim(),
        trigger: newFunnel.trigger,
        status: "–ê–∫—Ç–∏–≤–Ω–∞",
        conversion: Math.floor(Math.random() * 30) + 10,
        steps: newFunnel.steps,
      }

      setFunnels((prevFunnels) => [...prevFunnels, newFunnelData])
      setNewFunnel({ name: "", trigger: "", steps: [{ message: "", channel: "", delay: "0" }] })
      setShowAutofunnelModal(false)
      setNotification({ type: "success", message: `–í–æ—Ä–æ–Ω–∫–∞ "${newFunnelData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!` })

      setTimeout(() => setNotification(null), 3000)
    } catch (error) {
      setNotification({ type: "error", message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." })
    } finally {
      setIsCreatingFunnel(false)
    }
  }

  return (
    <div className="space-y-6">
      {notification && (
        <div
          className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg ${
            notification.type === "success" ? "bg-green-500 text-white" : "bg-red-500 text-white"
          }`}
        >
          {notification.message}
        </div>
      )}

      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">üì£ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –∫–ª–∏–µ–Ω—Ç—ã</h1>
          <p className="text-muted-foreground">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–æ–π</p>
        </div>
        <div className="flex gap-2">
          <Dialog open={showCampaignModal} onOpenChange={setShowCampaignModal}>
            <DialogTrigger asChild>
              <Button>
                <Send className="w-4 h-4 mr-2" />
                –ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>–°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏</Label>
                    <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" />
                  </div>
                  <div>
                    <Label>–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="email">Email —Ä–∞—Å—Å—ã–ª–∫–∞</SelectItem>
                        <SelectItem value="sms">SMS —Ä–∞—Å—Å—ã–ª–∫–∞</SelectItem>
                        <SelectItem value="whatsapp">WhatsApp</SelectItem>
                        <SelectItem value="telegram">Telegram</SelectItem>
                        <SelectItem value="social">–°–æ—Ü—Å–µ—Ç–∏</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div>
                  <Label>–°–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã</SelectItem>
                      <SelectItem value="vip">VIP –∫–ª–∏–µ–Ω—Ç—ã</SelectItem>
                      <SelectItem value="new">–ù–æ–≤–∏—á–∫–∏</SelectItem>
                      <SelectItem value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>–°–æ–æ–±—â–µ–Ω–∏–µ</Label>
                  <Textarea placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è" rows={4} />
                </div>
                <div className="flex justify-end gap-2">
                  <Button variant="outline" onClick={() => setShowCampaignModal(false)}>
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button onClick={() => setShowCampaignModal(false)}>–°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
          <Button variant="outline">
            <Brain className="w-4 h-4 mr-2" />
            AI-–ø–æ–º–æ—â–Ω–∏–∫
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –ª–∏–¥–æ–≤</p>
                <p className="text-2xl font-bold">1,250</p>
                <p className="text-xs text-green-600">+12% –∑–∞ –º–µ—Å—è—Ü</p>
              </div>
              <Users className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏</p>
                <p className="text-2xl font-bold">8</p>
                <p className="text-xs text-blue-600">2 –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã</p>
              </div>
              <Send className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</p>
                <p className="text-2xl font-bold">15.2%</p>
                <p className="text-xs text-green-600">+2.1% –∑–∞ –Ω–µ–¥–µ–ª—é</p>
              </div>
              <Target className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">ROI –∫–∞–º–ø–∞–Ω–∏–π</p>
                <p className="text-2xl font-bold">340%</p>
                <p className="text-xs text-green-600">+45% –∑–∞ –º–µ—Å—è—Ü</p>
              </div>
              <TrendingUp className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5" />
            –í–æ—Ä–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {funnelData.map((stage, index) => (
              <div key={index} className="flex items-center gap-4">
                <div className="w-32 text-sm font-medium">{stage.stage}</div>
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-sm">{stage.count.toLocaleString()}</span>
                    <span className="text-sm text-muted-foreground">{stage.percentage}%</span>
                  </div>
                  <Progress value={stage.percentage} className="h-2" />
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">–û–±–∑–æ—Ä</TabsTrigger>
          <TabsTrigger value="campaigns">–ö–∞–º–ø–∞–Ω–∏–∏</TabsTrigger>
          <TabsTrigger value="segments">–°–µ–≥–º–µ–Ω—Ç—ã</TabsTrigger>
          <TabsTrigger value="automation">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</TabsTrigger>
          <TabsTrigger value="analytics">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {campaigns.slice(0, 3).map((campaign) => (
                    <div key={campaign.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <p className="font-medium">{campaign.name}</p>
                        <p className="text-sm text-muted-foreground">{campaign.type}</p>
                      </div>
                      <Badge
                        variant={
                          campaign.status === "–ê–∫—Ç–∏–≤–Ω–∞"
                            ? "default"
                            : campaign.status === "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                              ? "secondary"
                              : "outline"
                        }
                      >
                        {campaign.status}
                      </Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>–°–µ–≥–º–µ–Ω—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {segments.map((segment) => (
                    <div key={segment.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <p className="font-medium">{segment.name}</p>
                        <p className="text-sm text-muted-foreground">{segment.criteria}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">{segment.count.toLocaleString()}</p>
                        <p className={`text-sm ${segment.growth.startsWith("+") ? "text-green-600" : "text-red-600"}`}>
                          {segment.growth}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="campaigns" className="space-y-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏</CardTitle>
                <div className="flex gap-2">
                  <Dialog open={showFilterModal} onOpenChange={setShowFilterModal}>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        <Filter className="w-4 h-4 mr-2" />
                        –§–∏–ª—å—Ç—Ä
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>–§–∏–ª—å—Ç—Ä –∫–∞–º–ø–∞–Ω–∏–π</DialogTitle>
                      </DialogHeader>
                      <div className="space-y-4">
                        <div>
                          <Label>–°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏</Label>
                          <Select
                            value={campaignFilter.status}
                            onValueChange={(value) => setCampaignFilter({ ...campaignFilter, status: value })}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
                              <SelectItem value="–ê–∫—Ç–∏–≤–Ω–∞">–ê–∫—Ç–∏–≤–Ω—ã–µ</SelectItem>
                              <SelectItem value="–ó–∞–≤–µ—Ä—à–µ–Ω–∞">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</SelectItem>
                              <SelectItem value="–ß–µ—Ä–Ω–æ–≤–∏–∫">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <Label>–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏</Label>
                          <Select
                            value={campaignFilter.type}
                            onValueChange={(value) => setCampaignFilter({ ...campaignFilter, type: value })}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">–í—Å–µ —Ç–∏–ø—ã</SelectItem>
                              <SelectItem value="Email">Email</SelectItem>
                              <SelectItem value="SMS">SMS</SelectItem>
                              <SelectItem value="WhatsApp">WhatsApp</SelectItem>
                              <SelectItem value="Telegram">Telegram</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="flex justify-end gap-2">
                          <Button
                            variant="outline"
                            onClick={() => {
                              setCampaignFilter({ status: "all", type: "all" })
                            }}
                          >
                            –°–±—Ä–æ—Å–∏—Ç—å
                          </Button>
                          <Button onClick={() => setShowFilterModal(false)}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</Button>
                        </div>
                      </div>
                    </DialogContent>
                  </Dialog>
                  <Button size="sm" onClick={() => setShowCampaignModal(true)}>
                    <Send className="w-4 h-4 mr-2" />
                    –ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-2">–ö–∞–º–ø–∞–Ω–∏—è</th>
                      <th className="text-left p-2">–¢–∏–ø</th>
                      <th className="text-left p-2">–°—Ç–∞—Ç—É—Å</th>
                      <th className="text-right p-2">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</th>
                      <th className="text-right p-2">–û—Ç–∫—Ä—ã—Ç–æ</th>
                      <th className="text-right p-2">–ö–ª–∏–∫–∏</th>
                      <th className="text-right p-2">–ö–æ–Ω–≤–µ—Ä—Å–∏–∏</th>
                      <th className="text-right p-2">CTR</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredCampaigns.map((campaign) => (
                      <tr key={campaign.id} className="border-b hover:bg-muted/50">
                        <td className="p-2 font-medium">{campaign.name}</td>
                        <td className="p-2">
                          <Badge variant="outline">{campaign.type}</Badge>
                        </td>
                        <td className="p-2">
                          <Badge
                            variant={
                              campaign.status === "–ê–∫—Ç–∏–≤–Ω–∞"
                                ? "default"
                                : campaign.status === "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                                  ? "secondary"
                                  : "outline"
                            }
                          >
                            {campaign.status}
                          </Badge>
                        </td>
                        <td className="p-2 text-right">{campaign.sent.toLocaleString()}</td>
                        <td className="p-2 text-right">{campaign.opened.toLocaleString()}</td>
                        <td className="p-2 text-right">{campaign.clicked.toLocaleString()}</td>
                        <td className="p-2 text-right">{campaign.converted.toLocaleString()}</td>
                        <td className="p-2 text-right">
                          {campaign.sent > 0 ? ((campaign.clicked / campaign.sent) * 100).toFixed(1) + "%" : "0%"}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="segments" className="space-y-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏</CardTitle>
                <Dialog open={showSegmentModal} onOpenChange={setShowSegmentModal}>
                  <DialogTrigger asChild>
                    <Button>
                      <UserPlus className="w-4 h-4 mr-2" />
                      –ù–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>–°–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ *</Label>
                        <Input
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                          value={newSegment.name}
                          onChange={(e) => setNewSegment({ ...newSegment, name: e.target.value })}
                          disabled={isCreatingSegment}
                        />
                      </div>
                      <div>
                        <Label>–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ *</Label>
                        <Select
                          value={newSegment.criteria}
                          onValueChange={(value) => setNewSegment({ ...newSegment, criteria: value })}
                          disabled={isCreatingSegment}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="–ü–æ –ø–æ–∫—É–ø–∫–∞–º">–ü–æ –ø–æ–∫—É–ø–∫–∞–º</SelectItem>
                            <SelectItem value="–ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏">–ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</SelectItem>
                            <SelectItem value="–ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏">–ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</SelectItem>
                            <SelectItem value="–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏">–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</SelectItem>
                            <SelectItem value="–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É">–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                        <Textarea
                          placeholder="–û–ø–∏—à–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞"
                          value={newSegment.description}
                          onChange={(e) => setNewSegment({ ...newSegment, description: e.target.value })}
                          disabled={isCreatingSegment}
                        />
                      </div>
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          onClick={() => {
                            setShowSegmentModal(false)
                            setNewSegment({ name: "", criteria: "", description: "" })
                            setNotification(null)
                          }}
                          disabled={isCreatingSegment}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                          onClick={handleCreateSegment}
                          disabled={isCreatingSegment || !newSegment.name.trim() || !newSegment.criteria.trim()}
                        >
                          {isCreatingSegment ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç"}
                        </Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {segments.map((segment) => (
                  <Card key={segment.id}>
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-medium">{segment.name}</h3>
                        <Badge variant="secondary">{segment.count.toLocaleString()}</Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mb-2">{segment.criteria}</p>
                      <div className="flex items-center justify-between">
                        <span
                          className={`text-sm font-medium ${segment.growth.startsWith("+") ? "text-green-600" : "text-red-600"}`}
                        >
                          {segment.growth}
                        </span>
                        <Button size="sm" variant="outline">
                          –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="automation" className="space-y-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ—Ä–æ–Ω–∫–∏</CardTitle>
                <Dialog open={showAutofunnelModal} onOpenChange={setShowAutofunnelModal}>
                  <DialogTrigger asChild>
                    <Button>
                      <Zap className="w-4 h-4 mr-2" />
                      –°–æ–∑–¥–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="max-w-2xl">
                    <DialogHeader>
                      <DialogTitle>–°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–æ—Ä–æ–Ω–∫—É</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ *</Label>
                        <Input
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                          value={newFunnel.name}
                          onChange={(e) => setNewFunnel({ ...newFunnel, name: e.target.value })}
                          disabled={isCreatingFunnel}
                        />
                      </div>
                      <div>
                        <Label>–¢—Ä–∏–≥–≥–µ—Ä –∑–∞–ø—É—Å–∫–∞ *</Label>
                        <Select
                          value={newFunnel.trigger}
                          onValueChange={(value) => setNewFunnel({ ...newFunnel, trigger: value })}
                          disabled={isCreatingFunnel}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="registration">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</SelectItem>
                            <SelectItem value="purchase">–ü–æ–∫—É–ø–∫–∞</SelectItem>
                            <SelectItem value="abandon">–ë—Ä–æ—à–µ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞</SelectItem>
                            <SelectItem value="birthday">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</SelectItem>
                            <SelectItem value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π *</Label>
                        <div className="space-y-2">
                          {newFunnel.steps.map((step, index) => (
                            <div key={index} className="flex items-center gap-2 p-2 border rounded">
                              <span className="text-sm font-medium">{index + 1}.</span>
                              <Input
                                placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                                value={step.message}
                                onChange={(e) => handleFunnelStepChange(index, "message", e.target.value)}
                                disabled={isCreatingFunnel}
                              />
                              <Select
                                value={step.channel}
                                onValueChange={(value) => handleFunnelStepChange(index, "channel", value)}
                                disabled={isCreatingFunnel}
                              >
                                <SelectTrigger className="w-32">
                                  <SelectValue placeholder="–ö–∞–Ω–∞–ª" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="email">Email</SelectItem>
                                  <SelectItem value="sms">SMS</SelectItem>
                                  <SelectItem value="whatsapp">WhatsApp</SelectItem>
                                  <SelectItem value="telegram">Telegram</SelectItem>
                                </SelectContent>
                              </Select>
                              <Select
                                value={step.delay}
                                onValueChange={(value) => handleFunnelStepChange(index, "delay", value)}
                                disabled={isCreatingFunnel}
                              >
                                <SelectTrigger className="w-24">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="0">–°—Ä–∞–∑—É</SelectItem>
                                  <SelectItem value="1">+1 –¥–µ–Ω—å</SelectItem>
                                  <SelectItem value="2">+2 –¥–Ω—è</SelectItem>
                                  <SelectItem value="3">+3 –¥–Ω—è</SelectItem>
                                  <SelectItem value="7">+7 –¥–Ω–µ–π</SelectItem>
                                </SelectContent>
                              </Select>
                              {newFunnel.steps.length > 1 && (
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleRemoveFunnelStep(index)}
                                  disabled={isCreatingFunnel}
                                >
                                  ‚úï
                                </Button>
                              )}
                            </div>
                          ))}
                          <Button variant="outline" size="sm" onClick={handleAddFunnelStep} disabled={isCreatingFunnel}>
                            + –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥
                          </Button>
                        </div>
                      </div>
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          onClick={() => {
                            setShowAutofunnelModal(false)
                            setNewFunnel({ name: "", trigger: "", steps: [{ message: "", channel: "", delay: "0" }] })
                            setNotification(null)
                          }}
                          disabled={isCreatingFunnel}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                          onClick={handleCreateFunnel}
                          disabled={isCreatingFunnel || !newFunnel.name.trim() || !newFunnel.trigger}
                        >
                          {isCreatingFunnel ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É"}
                        </Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {funnels.map((funnel) => (
                  <Card key={funnel.id}>
                    <CardContent className="p-4">
                      <div className="flex items-center gap-2 mb-3">
                        <Zap className="w-5 h-5 text-blue-500" />
                        <h3 className="font-medium">{funnel.name}</h3>
                        <Badge variant={funnel.status === "–ê–∫—Ç–∏–≤–Ω–∞" ? "default" : "secondary"}>{funnel.status}</Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mb-3">
                        –¢—Ä–∏–≥–≥–µ—Ä:{" "}
                        {funnel.trigger === "registration"
                          ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
                          : funnel.trigger === "inactive"
                            ? "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
                            : funnel.trigger === "purchase"
                              ? "–ü–æ–∫—É–ø–∫–∞"
                              : funnel.trigger}
                      </p>
                      <div className="space-y-2 text-sm">
                        {funnel.steps.map((step, index) => (
                          <div key={index} className="flex items-center gap-2">
                            {step.channel === "email" && <Mail className="w-4 h-4" />}
                            {step.channel === "sms" && <Phone className="w-4 h-4" />}
                            {step.channel === "whatsapp" && <MessageSquare className="w-4 h-4" />}
                            {step.channel === "telegram" && <MessageSquare className="w-4 h-4" />}
                            <span>
                              {step.message} ({step.delay === "0" ? "—Å—Ä–∞–∑—É" : `+${step.delay} –¥–Ω.`})
                            </span>
                          </div>
                        ))}
                      </div>
                      <div className="flex items-center justify-between mt-4">
                        <span className="text-sm text-muted-foreground">–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {funnel.conversion}%</span>
                        <Button size="sm" variant="outline">
                          –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Mail className="w-4 h-4" />
                      <span>Email</span>
                    </div>
                    <div className="text-right">
                      <p className="font-medium">24.5%</p>
                      <p className="text-sm text-muted-foreground">–æ—Ç–∫—Ä—ã–≤–∞–µ–º–æ—Å—Ç—å</p>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <MessageSquare className="w-4 h-4" />
                      <span>WhatsApp</span>
                    </div>
                    <div className="text-right">
                      <p className="font-medium">78.2%</p>
                      <p className="text-sm text-muted-foreground">–æ—Ç–∫—Ä—ã–≤–∞–µ–º–æ—Å—Ç—å</p>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Phone className="w-4 h-4" />
                      <span>SMS</span>
                    </div>
                    <div className="text-right">
                      <p className="font-medium">95.1%</p>
                      <p className="text-sm text-muted-foreground">–æ—Ç–∫—Ä—ã–≤–∞–µ–º–æ—Å—Ç—å</p>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Share2 className="w-4 h-4" />
                      <span>–°–æ—Ü—Å–µ—Ç–∏</span>
                    </div>
                    <div className="text-right">
                      <p className="font-medium">12.8%</p>
                      <p className="text-sm text-muted-foreground">–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>A/B —Ç–µ—Å—Ç—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="p-3 border rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium">–¢–µ–º–∞ –ø–∏—Å—å–º–∞</h4>
                      <Badge variant="default">–ê–∫—Ç–∏–≤–Ω—ã–π</Badge>
                    </div>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <p className="text-muted-foreground">–í–∞—Ä–∏–∞–Ω—Ç A</p>
                        <p>–°–∫–∏–¥–∫–∞ 20% —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!</p>
                        <p className="text-green-600">CTR: 3.2%</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">–í–∞—Ä–∏–∞–Ω—Ç B</p>
                        <p>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</p>
                        <p className="text-blue-600">CTR: 4.1%</p>
                      </div>
                    </div>
                  </div>
                  <div className="p-3 border rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏</h4>
                      <Badge variant="secondary">–ó–∞–≤–µ—Ä—à–µ–Ω</Badge>
                    </div>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <p className="text-muted-foreground">9:00</p>
                        <p className="text-green-600">–û—Ç–∫—Ä—ã—Ç–∏–π: 18.5%</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">18:00</p>
                        <p className="text-blue-600">–û—Ç–∫—Ä—ã—Ç–∏–π: 24.1% ‚úì</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>–õ–∏–¥-—Å–∫–æ—Ä–∏–Ω–≥ (–≥–æ—Ä—è—á–∏–µ –∫–ª–∏–µ–Ω—Ç—ã)</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-2">–ö–ª–∏–µ–Ω—Ç</th>
                      <th className="text-left p-2">–ò—Å—Ç–æ—á–Ω–∏–∫</th>
                      <th className="text-center p-2">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th>
                      <th className="text-center p-2">–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è</th>
                      <th className="text-center p-2">–°–∫–æ—Ä</th>
                      <th className="text-left p-2">–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="border-b hover:bg-muted/50">
                      <td className="p-2">
                        <div>
                          <p className="font-medium">–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞</p>
                          <p className="text-sm text-muted-foreground">anna@example.com</p>
                        </div>
                      </td>
                      <td className="p-2">Google Ads</td>
                      <td className="p-2 text-center">
                        <Badge variant="default">–í—ã—Å–æ–∫–∞—è</Badge>
                      </td>
                      <td className="p-2 text-center">12</td>
                      <td className="p-2 text-center">
                        <Badge variant="default" className="bg-red-500">
                          95
                        </Badge>
                      </td>
                      <td className="p-2">üî• –ì–æ—Ä—è—á–∏–π –ª–∏–¥</td>
                    </tr>
                    <tr className="border-b hover:bg-muted/50">
                      <td className="p-2">
                        <div>
                          <p className="font-medium">–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤</p>
                          <p className="text-sm text-muted-foreground">mikhail@example.com</p>
                        </div>
                      </td>
                      <td className="p-2">–°–æ—Ü—Å–µ—Ç–∏</td>
                      <td className="p-2 text-center">
                        <Badge variant="secondary">–°—Ä–µ–¥–Ω—è—è</Badge>
                      </td>
                      <td className="p-2 text-center">7</td>
                      <td className="p-2 text-center">
                        <Badge variant="secondary" className="bg-yellow-500">
                          72
                        </Badge>
                      </td>
                      <td className="p-2">‚ö° –¢–µ–ø–ª—ã–π –ª–∏–¥</td>
                    </tr>
                    <tr className="border-b hover:bg-muted/50">
                      <td className="p-2">
                        <div>
                          <p className="font-medium">–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞</p>
                          <p className="text-sm text-muted-foreground">elena@example.com</p>
                        </div>
                      </td>
                      <td className="p-2">Email</td>
                      <td className="p-2 text-center">
                        <Badge variant="outline">–ù–∏–∑–∫–∞—è</Badge>
                      </td>
                      <td className="p-2 text-center">3</td>
                      <td className="p-2 text-center">
                        <Badge variant="outline" className="bg-blue-500">
                          45
                        </Badge>
                      </td>
                      <td className="p-2">‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export { MarketingDashboard }
export default MarketingDashboard
